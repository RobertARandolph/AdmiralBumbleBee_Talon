from talon import Context, Module, actions, app, imgui, registry, settings
import re
# This is obviously not "lisp" but clojure specific currently. That will change over time.

mod = Module()
ctx = Context()
ctx.matches = r"""
mode: user.clojure
mode: command
and code.language: clojure
"""

mod.tag("code_clojure", desc="Tag for enabling clojure-things")

def insert_plain(s) -> str:
    return f"({s} )"

mod.list('clojure_string', desc='Clojure string functions.')
ctx.lists['self.clojure_string'] = {
    	"blank": "blank?",
    	"capitalize": "capitalize",
    	"ends with": "ends-with?",
    	"escape": "escape",
    	"includes": "includes?",
    	"index of": "index-of",
    	"join": "join",
    	"last index of": "last-index-of",
    	"lower case": "lower-case",
    	"re quote replacement": "re-quote-replacement",
    	"replace": "replace",
    	"replace first": "replace-first",
    	"reverse": "reverse",
    	"split": "split",
    	"split lines": "split-lines",
    	"starts with": "starts-with?",
    	"trim": "trim",
    	"trim newline": "trim-newline",
    	"trim left": "triml",
    	"trim right": "trimr",
    	"upper case": "upper-case"
}

@mod.capture(rule="string {self.clojure_string}")
def clj_string(m) -> str:
    return insert_plain(m.clojure_string)


mod.list('clojure_core', desc='Clojure core functions.')
ctx.lists['self.clojure_core'] = {
    "asterisk": "*",
    "asterisk quote": "*'",
    "last result": "*1",
    "second last result": "*2",
    "third last result": "*3",
    "agent": "*agent*",
    "allow unresolved vars": "*allow-unresolved-vars*",
    "assert": "*assert*",
    "clojure version": "*clojure-version*",
    "command line args": "*command-line-args*",
    "compile files": "*compile-files*",
    "compile path": "*compile-path*",
    "compiler options": "*compiler-options*",
    "data readers": "*data-readers*",
    "default data reader fn": "*default-data-reader-fn*",
    "e": "*e",
    "err": "*err*",
    "file": "*file*",
    "flush on newline": "*flush-on-newline*",
    "fn loader": "*fn-loader*",
    "in": "*in*",
    "math context": "*math-context*",
    "ns": "*ns*",
    "out": "*out*",
    "print dup": "*print-dup*",
    "print length": "*print-length*",
    "print level": "*print-level*",
    "print meta": "*print-meta*",
    "print namespace maps": "*print-namespace-maps*",
    "print readably": "*print-readably*",
    "read eval": "*read-eval*",
    "reader resolver": "*reader-resolver*",
    "source path": "*source-path*",
    "suppress read": "*suppress-read*",
    "unchecked math": "*unchecked-math*",
    "use context classloader": "*use-context-classloader*",
    "verbose defrecords": "*verbose-defrecords*",
    "warn on reflection": "*warn-on-reflection*",
    "plus": "+",
    "unchecked plus": "+\'",
    "add": "+",
    "unchecked add": "+\'",
    "minus": "-",
    "unchecked minus": "-\'",
    "subtract": "-",
    "unchecked subtract": "-\'",
    "thread first": "->",
    "thread last": "->>",
    "thread ArrayChunk": "->ArrayChunk",
    "thread Eduction": "->Eduction",
    "thread Vec": "->Vec",
    "thread VecNode": "->VecNode",
    "thread VecSeq": "->VecSeq",
    "cache protocol fn": "-cache-protocol-fn",
    "reset methods": "-reset-methods",
    "..": "..",
    "divide": "/",
    "less than": "<",
    "less or equal than": "<=",
    "equal or less than": "<=",
    "equal": "=",
    "type equal": "==",
    "equal type": "==",
    "greater then": ">",
    "greater or equal than": ">=",
    "equal or greater than": ">=",
    "EMPTY NODE": "EMPTY-NODE",
    "Inst": "Inst",
    "PrintWriter on": "PrintWriter-on",
    "StackTraceElement >vec": "StackTraceElement->vec",
    "Throwable >map": "Throwable->map",
    "accessor": "accessor",
    "aclone": "aclone",
    "add classpath": "add-classpath",
    "add tap": "add-tap",
    "add watch": "add-watch",
    "agent": "agent",
    "agent error": "agent-error",
    "agent errors": "agent-errors",
    "aget": "aget",
    "alength": "alength",
    "alias": "alias",
    "all ns": "all-ns",
    "alter": "alter",
    "state alter meta": "alter-meta!",
    "alter var root": "alter-var-root",
    "amap": "amap",
    "ancestors": "ancestors",
    "and": "and",
    "pred any": "any?",
    "apply": "apply",
    "areduce": "areduce",
    "array map": "array-map",
    "thread": "as->",
    "aset": "aset",
    "aset boolean": "aset-boolean",
    "aset byte": "aset-byte",
    "aset char": "aset-char",
    "aset double": "aset-double",
    "aset float": "aset-float",
    "aset int": "aset-int",
    "aset long": "aset-long",
    "aset short": "aset-short",
    "assert": "assert",
    "assoc": "assoc",
    "state assoc": "assoc!",
    "assoc in": "assoc-in",
    "associative": "associative?",
    "atom": "atom",
    "await": "await",
    "await for": "await-for",
    "await1": "await1",
    "bases": "bases",
    "bean": "bean",
    "bigdec": "bigdec",
    "bigint": "bigint",
    "biginteger": "biginteger",
    "binding": "binding",
    "bit and": "bit-and",
    "bit and not": "bit-and-not",
    "bit clear": "bit-clear",
    "bit flip": "bit-flip",
    "bit not": "bit-not",
    "bit or": "bit-or",
    "bit set": "bit-set",
    "bit shift left": "bit-shift-left",
    "bit shift right": "bit-shift-right",
    "bit test": "bit-test",
    "bit xor": "bit-xor",
    "boolean": "boolean",
    "boolean array": "boolean-array",
    "pred boolean": "boolean?",
    "booleans": "booleans",
    "bound fn": "bound-fn",
    "bound fn*": "bound-fn*",
    "pred bound": "bound?",
    "bounded count": "bounded-count",
    "butlast": "butlast",
    "byte": "byte",
    "byte array": "byte-array",
    "bytes": "bytes",
    "pred bytes": "bytes?",
    "case": "case",
    "cast": "cast",
    "cat": "cat",
    "char": "char",
    "char array": "char-array",
    "char escape string": "char-escape-string",
    "char name string": "char-name-string",
    "pred char": "char?",
    "chars": "chars",
    "chunk": "chunk",
    "chunk append": "chunk-append",
    "chunk buffer": "chunk-buffer",
    "chunk cons": "chunk-cons",
    "chunk first": "chunk-first",
    "chunk next": "chunk-next",
    "chunk rest": "chunk-rest",
    "pred chunked seq": "chunked-seq?",
    "class": "class",
    "pred class": "class?",
    "clear agent errors": "clear-agent-errors",
    "clojure version": "clojure-version",
    "pred coll": "coll?",
    "comment": "comment",
    "commute": "commute",
    "comp": "comp",
    "comparator": "comparator",
    "compare": "compare",
    "state compare and set": "compare-and-set!",
    "compile": "compile",
    "complement": "complement",
    "completing": "completing",
    "concat": "concat",
    "cond": "cond",
    "cond >": "cond->",
    "cond >>": "cond->>",
    "condp": "condp",
    "conj": "conj",
    "state conj": "conj!",
    "cons": "cons",
    "constantly": "constantly",
    "construct proxy": "construct-proxy",
    "pred contains": "contains?",
    "count": "count",
    "pred counted": "counted?",
    "create ns": "create-ns",
    "create struct": "create-struct",
    "cycle": "cycle",
    "dec": "dec",
    "dec'": "dec'",
    "pred decimal": "decimal?",
    "declare": "declare",
    "dedupe": "dedupe",
    "default data readers": "default-data-readers",
    "definline": "definline",
    "definterface": "definterface",
    "defmacro": "defmacro",
    "defmethod": "defmethod",
    "defmulti": "defmulti",
    "defn": "defn",
    "defn ": "defn-",
    "defonce": "defonce",
    "defprotocol": "defprotocol",
    "defrecord": "defrecord",
    "defstruct": "defstruct",
    "deftype": "deftype",
    "delay": "delay",
    "pred delay": "delay?",
    "deliver": "deliver",
    "denominator": "denominator",
    "deref": "deref",
    "derive": "derive",
    "descendants": "descendants",
    "destructure": "destructure",
    "disj": "disj",
    "state disj": "disj!",
    "dissoc": "dissoc",
    "state dissoc": "dissoc!",
    "distinct": "distinct",
    "pred distinct": "distinct?",
    "doall": "doall",
    "dorun": "dorun",
    "doseq": "doseq",
    "dosync": "dosync",
    "dotimes": "dotimes",
    "doto": "doto",
    "double": "double",
    "double array": "double-array",
    "pred double": "double?",
    "doubles": "doubles",
    "drop": "drop",
    "drop last": "drop-last",
    "drop while": "drop-while",
    "eduction": "eduction",
    "empty": "empty",
    "pred empty": "empty?",
    "ensure": "ensure",
    "ensure reduced": "ensure-reduced",
    "enumeration seq": "enumeration-seq",
    "error handler": "error-handler",
    "error mode": "error-mode",
    "eval": "eval",
    "pred even": "even?",
    "every pred": "every-pred",
    "pred every": "every?",
    "ex cause": "ex-cause",
    "ex data": "ex-data",
    "ex info": "ex-info",
    "ex message": "ex-message",
    "extend": "extend",
    "extend protocol": "extend-protocol",
    "extend type": "extend-type",
    "extenders": "extenders",
    "pred extends": "extends?",
    "pred false": "false?",
    "ffirst": "ffirst",
    "file seq": "file-seq",
    "filter": "filter",
    "filterv": "filterv",
    "find": "find",
    "find keyword": "find-keyword",
    "find ns": "find-ns",
    "find protocol impl": "find-protocol-impl",
    "find protocol method": "find-protocol-method",
    "find var": "find-var",
    "first": "first",
    "flatten": "flatten",
    "float": "float",
    "float array": "float-array",
    "pred float": "float?",
    "floats": "floats",
    "flush": "flush",
    "fn": "fn",
    "pred fn": "fn?",
    "fnext": "fnext",
    "fnil": "fnil",
    "for": "for",
    "force": "force",
    "format": "format",
    "frequencies": "frequencies",
    "future": "future",
    "future call": "future-call",
    "future cancel": "future-cancel",
    "pred future cancelled": "future-cancelled?",
    "pred future done": "future-done?",
    "pred future": "future?",
    "gen class": "gen-class",
    "gen interface": "gen-interface",
    "gensym": "gensym",
    "get": "get",
    "get in": "get-in",
    "get method": "get-method",
    "get proxy class": "get-proxy-class",
    "get thread bindings": "get-thread-bindings",
    "get validator": "get-validator",
    "group by": "group-by",
    "halt when": "halt-when",
    "hash": "hash",
    "hash combine": "hash-combine",
    "hash map": "hash-map",
    "hash ordered coll": "hash-ordered-coll",
    "hash set": "hash-set",
    "hash unordered coll": "hash-unordered-coll",
    "pred ident": "ident?",
    "pred identical": "identical?",
    "identity": "identity",
    "if let": "if-let",
    "if not": "if-not",
    "if some": "if-some",
    "pred ifn": "ifn?",
    "import": "import",
    "in ns": "in-ns",
    "inc": "inc",
    "inc'": "inc'",
    "pred indexed": "indexed?",
    "init proxy": "init-proxy",
    "inst ms": "inst-ms",
    "inst ms*": "inst-ms*",
    "pred inst": "inst?",
    "pred instance": "instance?",
    "int": "int",
    "int array": "int-array",
    "pred int": "int?",
    "pred integer": "integer?",
    "interleave": "interleave",
    "intern": "intern",
    "interpose": "interpose",
    "into": "into",
    "into array": "into-array",
    "ints": "ints",
    "state io": "io!",
    "pred isa": "isa?",
    "iterate": "iterate",
    "iterator seq": "iterator-seq",
    "juxt": "juxt",
    "keep": "keep",
    "keep indexed": "keep-indexed",
    "key": "key",
    "keys": "keys",
    "keyword": "keyword",
    "pred keyword": "keyword?",
    "last": "last",
    "lazy cat": "lazy-cat",
    "lazy seq": "lazy-seq",
    "let": "let",
    "letfn": "letfn",
    "line seq": "line-seq",
    "list": "list",
    "list*": "list*",
    "pred list": "list?",
    "load": "load",
    "load file": "load-file",
    "load reader": "load-reader",
    "load string": "load-string",
    "loaded libs": "loaded-libs",
    "locking": "locking",
    "long": "long",
    "long array": "long-array",
    "longs": "longs",
    "loop": "loop",
    "macroexpand": "macroexpand",
    "macroexpand 1": "macroexpand-1",
    "make array": "make-array",
    "make hierarchy": "make-hierarchy",
    "map": "map",
    "pred map entry": "map-entry?",
    "map indexed": "map-indexed",
    "pred map": "map?",
    "mapcat": "mapcat",
    "mapv": "mapv",
    "max": "max",
    "max key": "max-key",
    "memfn": "memfn",
    "memoize": "memoize",
    "merge": "merge",
    "merge with": "merge-with",
    "meta": "meta",
    "method sig": "method-sig",
    "methods": "methods",
    "min": "min",
    "min key": "min-key",
    "mix collection hash": "mix-collection-hash",
    "mod": "mod",
    "munge": "munge",
    "name": "name",
    "namespace": "namespace",
    "namespace munge": "namespace-munge",
    "pred nat int": "nat-int?",
    "pred neg int": "neg-int?",
    "pred neg": "neg?",
    "newline": "newline",
    "next": "next",
    "nfirst": "nfirst",
    "pred nil": "nil?",
    "nnext": "nnext",
    "not": "not",
    "pred not any": "not-any?",
    "not empty": "not-empty",
    "pred not every": "not-every?",
    "not=": "not=",
    "ns": "ns",
    "ns aliases": "ns-aliases",
    "ns imports": "ns-imports",
    "ns interns": "ns-interns",
    "ns map": "ns-map",
    "ns name": "ns-name",
    "ns publics": "ns-publics",
    "ns refers": "ns-refers",
    "ns resolve": "ns-resolve",
    "ns unalias": "ns-unalias",
    "ns unmap": "ns-unmap",
    "nth": "nth",
    "nthnext": "nthnext",
    "nthrest": "nthrest",
    "num": "num",
    "pred number": "number?",
    "numerator": "numerator",
    "object array": "object-array",
    "pred odd": "odd?",
    "or": "or",
    "parents": "parents",
    "partial": "partial",
    "partition": "partition",
    "partition all": "partition-all",
    "partition by": "partition-by",
    "pcalls": "pcalls",
    "peek": "peek",
    "state persistent": "persistent!",
    "pmap": "pmap",
    "pop": "pop",
    "state pop": "pop!",
    "pop thread bindings": "pop-thread-bindings",
    "pred pos int": "pos-int?",
    "pred pos": "pos?",
    "pr": "pr",
    "pr str": "pr-str",
    "prefer method": "prefer-method",
    "prefers": "prefers",
    "primitives classnames": "primitives-classnames",
    "print": "print",
    "print ctor": "print-ctor",
    "print dup": "print-dup",
    "print method": "print-method",
    "print simple": "print-simple",
    "print str": "print-str",
    "printf": "printf",
    "println": "println",
    "println str": "println-str",
    "prn": "prn",
    "prn str": "prn-str",
    "promise": "promise",
    "proxy": "proxy",
    "proxy call with super": "proxy-call-with-super",
    "proxy mappings": "proxy-mappings",
    "proxy name": "proxy-name",
    "proxy super": "proxy-super",
    "push thread bindings": "push-thread-bindings",
    "pvalues": "pvalues",
    "pred qualified ident": "qualified-ident?",
    "pred qualified keyword": "qualified-keyword?",
    "pred qualified symbol": "qualified-symbol?",
    "quot": "quot",
    "rand": "rand",
    "rand int": "rand-int",
    "rand nth": "rand-nth",
    "random sample": "random-sample",
    "range": "range",
    "pred ratio": "ratio?",
    "pred rational": "rational?",
    "rationalize": "rationalize",
    "re find": "re-find",
    "re groups": "re-groups",
    "re matcher": "re-matcher",
    "re matches": "re-matches",
    "re pattern": "re-pattern",
    "re seq": "re-seq",
    "read": "read",
    "read+string": "read+string",
    "read line": "read-line",
    "read string": "read-string",
    "reader conditional": "reader-conditional",
    "pred reader conditional": "reader-conditional?",
    "pred realized": "realized?",
    "pred record": "record?",
    "reduce": "reduce",
    "reduce kv": "reduce-kv",
    "reduced": "reduced",
    "pred reduced": "reduced?",
    "reductions": "reductions",
    "ref": "ref",
    "ref history count": "ref-history-count",
    "ref max history": "ref-max-history",
    "ref min history": "ref-min-history",
    "ref set": "ref-set",
    "refer": "refer",
    "refer clojure": "refer-clojure",
    "reify": "reify",
    "release pending sends": "release-pending-sends",
    "rem": "rem",
    "remove": "remove",
    "remove all methods": "remove-all-methods",
    "remove method": "remove-method",
    "remove ns": "remove-ns",
    "remove tap": "remove-tap",
    "remove watch": "remove-watch",
    "repeat": "repeat",
    "repeatedly": "repeatedly",
    "replace": "replace",
    "replicate": "replicate",
    "require": "require",
    "requiring resolve": "requiring-resolve",
    "state reset": "reset!",
    "state reset meta": "reset-meta!",
    "state reset vals": "reset-vals!",
    "resolve": "resolve",
    "rest": "rest",
    "restart agent": "restart-agent",
    "resultset seq": "resultset-seq",
    "reverse": "reverse",
    "pred reversible": "reversible?",
    "rseq": "rseq",
    "rsubseq": "rsubseq",
    "state run": "run!",
    "pred satisfies": "satisfies?",
    "second": "second",
    "select keys": "select-keys",
    "send": "send",
    "send off": "send-off",
    "send via": "send-via",
    "seq": "seq",
    "pred seq": "seq?",
    "pred seqable": "seqable?",
    "seque": "seque",
    "sequence": "sequence",
    "pred sequential": "sequential?",
    "set": "set",
    "state set agent send executor": "set-agent-send-executor!",
    "state set agent send off executor": "set-agent-send-off-executor!",
    "state set error handler": "set-error-handler!",
    "state set error mode": "set-error-mode!",
    "state set validator": "set-validator!",
    "pred set": "set?",
    "short": "short",
    "short array": "short-array",
    "shorts": "shorts",
    "shuffle": "shuffle",
    "shutdown agents": "shutdown-agents",
    "pred simple ident": "simple-ident?",
    "pred simple keyword": "simple-keyword?",
    "pred simple symbol": "simple-symbol?",
    "slurp": "slurp",
    "some": "some",
    "some >": "some->",
    "some >>": "some->>",
    "some fn": "some-fn",
    "pred some": "some?",
    "sort": "sort",
    "sort by": "sort-by",
    "sorted map": "sorted-map",
    "sorted map by": "sorted-map-by",
    "sorted set": "sorted-set",
    "sorted set by": "sorted-set-by",
    "pred sorted": "sorted?",
    "pred special symbol": "special-symbol?",
    "spit": "spit",
    "split at": "split-at",
    "split with": "split-with",
    "str": "str",
    "pred string": "string?",
    "struct": "struct",
    "struct map": "struct-map",
    "subs": "subs",
    "subseq": "subseq",
    "subvec": "subvec",
    "supers": "supers",
    "state swap": "swap!",
    "state swap vals": "swap-vals!",
    "symbol": "symbol",
    "pred symbol": "symbol?",
    "sync": "sync",
    "tagged literal": "tagged-literal",
    "pred tagged literal": "tagged-literal?",
    "take": "take",
    "take last": "take-last",
    "take nth": "take-nth",
    "take while": "take-while",
    "tap>": "tap>",
    "test": "test",
    "the ns": "the-ns",
    "pred thread bound": "thread-bound?",
    "time": "time",
    "to array": "to-array",
    "to array 2d": "to-array-2d",
    "trampoline": "trampoline",
    "transduce": "transduce",
    "transient": "transient",
    "tree seq": "tree-seq",
    "pred true": "true?",
    "type": "type",
    "unchecked add": "unchecked-add",
    "unchecked add int": "unchecked-add-int",
    "unchecked byte": "unchecked-byte",
    "unchecked char": "unchecked-char",
    "unchecked dec": "unchecked-dec",
    "unchecked dec int": "unchecked-dec-int",
    "unchecked divide int": "unchecked-divide-int",
    "unchecked double": "unchecked-double",
    "unchecked float": "unchecked-float",
    "unchecked inc": "unchecked-inc",
    "unchecked inc int": "unchecked-inc-int",
    "unchecked int": "unchecked-int",
    "unchecked long": "unchecked-long",
    "unchecked multiply": "unchecked-multiply",
    "unchecked multiply int": "unchecked-multiply-int",
    "unchecked negate": "unchecked-negate",
    "unchecked negate int": "unchecked-negate-int",
    "unchecked remainder int": "unchecked-remainder-int",
    "unchecked short": "unchecked-short",
    "unchecked subtract": "unchecked-subtract",
    "unchecked subtract int": "unchecked-subtract-int",
    "underive": "underive",
    "unquote": "unquote",
    "unquote splicing": "unquote-splicing",
    "unreduced": "unreduced",
    "unsigned bit shift right": "unsigned-bit-shift-right",
    "update": "update",
    "update in": "update-in",
    "update proxy": "update-proxy",
    "pred uri": "uri?",
    "use": "use",
    "pred uuid": "uuid?",
    "val": "val",
    "vals": "vals",
    "var get": "var-get",
    "var set": "var-set",
    "pred var": "var?",
    "vary meta": "vary-meta",
    "vec": "vec",
    "vector": "vector",
    "vector of": "vector-of",
    "pred vector": "vector?",
    "state volatile": "volatile!",
    "pred volatile": "volatile?",
    "state vreset": "vreset!",
    "state vswap": "vswap!",
    "when": "when",
    "when first": "when-first",
    "when let": "when-let",
    "when not": "when-not",
    "when some": "when-some",
    "while": "while",
    "with bindings": "with-bindings",
    "with bindings*": "with-bindings*",
    "with in str": "with-in-str",
    "with loading context": "with-loading-context",
    "with local vars": "with-local-vars",
    "with meta": "with-meta",
    "with open": "with-open",
    "with out str": "with-out-str",
    "with precision": "with-precision",
    "with redefs": "with-redefs",
    "with redefs fn": "with-redefs-fn",
    "xml seq": "xml-seq",
    "pred zero": "zero?",
    "zipmap": "zipmap",
}

@mod.capture(rule="core {self.clojure_core}")
def clj_string(m) -> str:
    return insert_plain(m.clojure_core)

